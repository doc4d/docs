"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[50707],{3905:(e,a,r)=>{r.d(a,{Zo:()=>p,kt:()=>u});var t=r(67294);function o(e,a,r){return a in e?Object.defineProperty(e,a,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[a]=r,e}function s(e,a){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),r.push.apply(r,t)}return r}function n(e){for(var a=1;a<arguments.length;a++){var r=null!=arguments[a]?arguments[a]:{};a%2?s(Object(r),!0).forEach((function(a){o(e,a,r[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(r,a))}))}return e}function i(e,a){if(null==e)return{};var r,t,o=function(e,a){if(null==e)return{};var r,t,o={},s=Object.keys(e);for(t=0;t<s.length;t++)r=s[t],a.indexOf(r)>=0||(o[r]=e[r]);return o}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)r=s[t],a.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=t.createContext({}),c=function(e){var a=t.useContext(l),r=a;return e&&(r="function"==typeof e?e(a):n(n({},a),e)),r},p=function(e){var a=c(e.components);return t.createElement(l.Provider,{value:a},e.children)},d={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},m=t.forwardRef((function(e,a){var r=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(r),u=o,v=m["".concat(l,".").concat(u)]||m[u]||d[u]||s;return r?t.createElement(v,n(n({ref:a},p),{},{components:r})):t.createElement(v,n({ref:a},p))}));function u(e,a){var r=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var s=r.length,n=new Array(s);n[0]=m;var i={};for(var l in a)hasOwnProperty.call(a,l)&&(i[l]=a[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,n[1]=i;for(var c=2;c<s;c++)n[c]=r[c];return t.createElement.apply(null,n)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},15170:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>n,metadata:()=>l,toc:()=>p});r(67294);var t=r(3905);function o(){return o=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var r=arguments[a];for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])}return e},o.apply(this,arguments)}function s(e,a){if(null==e)return{};var r,t,o=function(e,a){if(null==e)return{};var r,t,o={},s=Object.keys(e);for(t=0;t<s.length;t++)r=s[t],a.indexOf(r)>=0||(o[r]=e[r]);return o}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)r=s[t],a.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}const n={id:"variables",title:"Vari\xe1veis"},i=void 0,l={unversionedId:"Concepts/variables",id:"version-18/Concepts/variables",title:"Vari\xe1veis",description:"Os dados em 4D s\xe3o armazenados de duas formas fundamentalmente diferentes. Os campos armazenam os dados permanentemente no disco; as vari\xe1veis armazenam os dados na mem\xf3ria de forma temporal.",source:"@site/i18n/pt/docusaurus-plugin-content-docs/version-18/Concepts/variables.md",sourceDirName:"Concepts",slug:"/Concepts/variables",permalink:"/docs/pt/18/Concepts/variables",draft:!1,editUrl:"https://github.com/4d/docs/issues/new?title=Comment%20on%20Concepts%2Fvariables.md%20(18)&body=Please%20enter%20your%20comment%3A",tags:[],version:"18",frontMatter:{id:"variables",title:"Vari\xe1veis"},sidebar:"docs",previous:{title:"Variant",permalink:"/docs/pt/18/Concepts/variant"},next:{title:"Arrays",permalink:"/docs/pt/18/Concepts/arrays"}},c={},p=[{value:"Cria\xe7\xe3o de vari\xe1veis",id:"cria\xe7\xe3o-de-vari\xe1veis",level:2},{value:"Atribui\xe7\xe3o de dados",id:"atribui\xe7\xe3o-de-dados",level:2},{value:"Vari\xe1veis locais, processo e inter-processo",id:"vari\xe1veis-locais-processo-e-inter-processo",level:2},{value:"Vari\xe1veis locais",id:"vari\xe1veis-locais",level:3},{value:"Vari\xe1veis processo",id:"vari\xe1veis-processo",level:3},{value:"Vari\xe1veis interprocesso",id:"vari\xe1veis-interprocesso",level:3}],d={toc:p};function m(e){var{components:a}=e,r=s(e,["components"]);return(0,t.kt)("wrapper",o({},d,r,{components:a,mdxType:"MDXLayout"}),(0,t.kt)("p",null,"Os dados em 4D s\xe3o armazenados de duas formas fundamentalmente diferentes. ",(0,t.kt)("strong",{parentName:"p"},"Os campos")," armazenam os dados permanentemente no disco; ",(0,t.kt)("strong",{parentName:"p"},"as vari\xe1veis")," armazenam os dados na mem\xf3ria de forma temporal."),(0,t.kt)("p",null,"Quando cria a sua base de dados 4D, especifica os nomes e tipos de campos que pretende utilizar. Com as vari\xe1veis \xe9 mais ou menos a mesma coisa, tamb\xe9m se lhes d\xe1 nomes e tipos diferentes (ver ",(0,t.kt)("a",o({parentName:"p"},{href:"/docs/pt/18/Concepts/data-types"}),"Tipos de dados"),")."),(0,t.kt)("p",null,"As vari\xe1veis s\xe3o objetos da linguagem; pode criar e utilizar variables que nunca aparecer\xe3o na tela. In your forms, you can display variables (except Pointer and BLOB) on the screen, enter data into them, and print them in reports. In this way, enterable and non-enterable area variables act just like fields, and the same built-in controls are available when you create them. Form variables can also control buttons, list boxes, scrollable areas, picture buttons, and so on, or display results of calculations that do not need to be saved."),(0,t.kt)("h2",o({},{id:"cria\xe7\xe3o-de-vari\xe1veis"}),"Cria\xe7\xe3o de vari\xe1veis"),(0,t.kt)("p",null,'Voc\xea cria as vari\xe1veis declarando-as mediante um dos comandos dos temas "Compilador" ou "Arrays".'),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"Nota:"),"os arrays s\xe3o um tipo particular de vari\xe1veis. Um array \xe9 uma s\xe9rie ordenada de vari\xe1veis do mesmo tipo. Para mais informa\xe7\xf5es, consulte por favor ",(0,t.kt)("a",o({parentName:"p"},{href:"/docs/pt/18/Concepts/arrays"}),"Arrays"),"."),(0,t.kt)("p",null,"Por exemplo, se quiser definir uma vari\xe1vel texto, escreva:"),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"})," C_TEXT(myText)\n")),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"Nota:")," apesar de n\xe3o recomendado, pode criar vari\xe1veis simplesmente usando-as; n\xe3o precisa definir as vari\xe1veis formalmente como se faz com os campos. Por exemplo, se quiser criar uma vari\xe1vel que contenha a data atual mais 30 dias, pode escrever:"),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"})," MyDate:=Current date+30 //MyDate \xe9 criada e obt\xe9m a data atual mais  30 d\xedas\n")),(0,t.kt)("p",null,"Ap\xf3s a cria\xe7\xe3o pode usar a vari\xe1vel onde quiser no seu banco de dados. Por exemplo, pode precisar armazenar a vari\xe1vel texto em um campo do mesmo tipo"),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"})," [MyTable]MyField:=MyText\n")),(0,t.kt)("p",null,"Seguem-se algumas declara\xe7\xf5es de vari\xe1veis b\xe1sicas:"),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"}),"\n C_BLOB(vxMyBlob) // A vari\xe1vel processo vxMyBlob se declara como uma vari\xe1vel de tipo BLOB\n C_DATE($vdCurDate) // A vari\xe1vel local $vdCurDate se declara como uma vari\xe1vel de tipo Data\n C_LONGINT(vg1;vg2;vg3) // As 3 vari\xe1veis de processo vg1, vg2 y vg3 se declaram como vari\xe1veis de tipo Inteiro longo\n C_OBJECT($vObj) // A vari\xe1vel local $vObj se declara como uma vari\xe1vel de tipo Objeto\n C_COLLECTION($vCol) // A vari\xe1vel local $vCol se declara como uma vari\xe1ve de tipo Cole\xe7\xe3o\n ARRAY LONGINT(alAnArray;10) //A vari\xe1vel do processo alAnArray se declara como um array Inteiro longo de 10 elementos\n")),(0,t.kt)("h2",o({},{id:"atribui\xe7\xe3o-de-dados"}),"Atribui\xe7\xe3o de dados"),(0,t.kt)("p",null,"Os dados podem ser colocados e copiados de vari\xe1veis e arrays. Colocar dados em uma vari\xe1vel \xe9 chamado ",(0,t.kt)("strong",{parentName:"p"},"atribuiindo os dados a uma vari\xe1vel")," e \xe9 feito com o operador de atribui\xe7\xe3o (:=). O operador de atribui\xe7\xe3o tamb\xe9m \xe9 usado para atribuir dados para elementos campos."),(0,t.kt)("p",null,"O operador de atribui\xe7\xe3o \xe9 a maneira mais importante de criar uma vari\xe1vel e jogar dados nela. Escreve-se o nome da vari\xe1vel que se pretende criar no lado esquerdo do operador de atribui\xe7\xe3o. Por exemplo:"),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"}),"MyNumber:=3\n")),(0,t.kt)("p",null,"creates the variable ",(0,t.kt)("em",{parentName:"p"},"MyNumber")," and puts the number 3 into it. If MyNumber already exists, then the number 3 is just put into it."),(0,t.kt)("p",null,"Of course, variables would not be very useful if you could not get data out of them. Once again, you use the assignment operator. If you need to put the value of MyNumber in a field called ","[Products]","Size, you would write ",(0,t.kt)("em",{parentName:"p"},"MyNumber")," on the right side of the assignment operator:"),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"}),"[Products]Size:=MyNumber\n")),(0,t.kt)("p",null,"In this case, ",(0,t.kt)("em",{parentName:"p"},"[Products]","Size")," would be equal to 3. This example is rather simple, but it illustrates the fundamental way that data is transferred from one place to another by using the language."),(0,t.kt)("p",null,"You assign data to array elements by using curly braces ({...}):"),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"}),'atNames{1}:="Richard"\n')),(0,t.kt)("h2",o({},{id:"vari\xe1veis-locais-processo-e-inter-processo"}),"Vari\xe1veis locais, processo e inter-processo"),(0,t.kt)("p",null,"You can create three types of variables: ",(0,t.kt)("strong",{parentName:"p"},"local"),", ",(0,t.kt)("strong",{parentName:"p"},"process"),", and ",(0,t.kt)("strong",{parentName:"p"},"interprocess"),". The difference between the three types of elements is their scope, or the objects to which they are available."),(0,t.kt)("h3",o({},{id:"vari\xe1veis-locais"}),"Vari\xe1veis locais"),(0,t.kt)("p",null,"A local variable is, as its name implies, local to a method\u2014accessible only within the method in which it was created and not accessible outside of that method. Being local to a method is formally referred to as being \u201clocal in scope.\u201d Local variables are used to restrict a variable so that it works only within the method."),(0,t.kt)("p",null,"You may want to use a local variable to:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Avoid conflicts with the names of other variables"),(0,t.kt)("li",{parentName:"ul"},"Use data temporarily"),(0,t.kt)("li",{parentName:"ul"},"Reduce the number of process variables")),(0,t.kt)("p",null,"The name of a local variable always starts with a dollar sign ($) and can contain up to 31 additional characters. If you enter a longer name, 4D truncates it to the appropriate length."),(0,t.kt)("p",null,"Quando trabalhar em um banco de dados com muitos m\xe9todos e vari\xe1veis, geralmente s\xf3 precisa usar uma vari\xe1vel dentro do m\xe9todo no qual trabalha. You can create and use a local variable in the method without worrying about whether you have used the same variable name somewhere else."),(0,t.kt)("p",null,"Frequentemente, em um banco de dados, pequenas peda\xe7os de informa\xe7\xe3o s\xe3o necess\xe1rios do usu\xe1rio. The ",(0,t.kt)("inlineCode",{parentName:"p"},"Request")," command can obtain this information. It displays a dialog box with a message prompting the user for a response. When the user enters the response, the command returns the information the user entered. You usually do not need to keep this information in your methods for very long. This is a typical way to use a local variable. This is a typical way to use a local variable. Aqui um exemplo simples:"),(0,t.kt)("pre",null,(0,t.kt)("code",o({parentName:"pre"},{className:"language-4d"}),' $vsID:=Request("Por favor insira o seu ID:")\n If(OK=1)\n    QUERY([People];[People]ID =$vsID)\n End if\n')),(0,t.kt)("p",null,"This method simply asks the user to enter an ID. It puts the response into a local variable, $vsID, and then searches for the ID that the user entered. When this method finishes, the $vsID local variable is erased from memory. This is fine, because the variable is needed only once and only in this method."),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"Note:")," Parameters $1, $2... passed to methods are local variables. For more information, please refer to ",(0,t.kt)("a",o({parentName:"p"},{href:"/docs/pt/18/Concepts/parameters"}),"Parameters"),"."),(0,t.kt)("h3",o({},{id:"vari\xe1veis-processo"}),"Vari\xe1veis processo"),(0,t.kt)("p",null,"A process variable is available only within a process. It is accessible to the process method and any other method called from within the process."),(0,t.kt)("p",null,"A process variable does not have a prefix before its name. A process variable name can contain up to 31 characters."),(0,t.kt)("p",null,"In interpreted mode, variables are maintained dynamically; they are created and erased from memory \u201con the fly.\u201d In compiled mode, all processes you create (user processes) share the same definition of process variables, but each process has a different instance for each variable. For example, the variable myVar is one variable in the process P_1 and another one in the process P_2."),(0,t.kt)("p",null,"A process can \u201cpeek and poke\u201d process variables from another process using the commands ",(0,t.kt)("inlineCode",{parentName:"p"},"GET PROCESS VARIABLE")," and ",(0,t.kt)("inlineCode",{parentName:"p"},"SET PROCESS VARIABLE"),". It is good programming practice to restrict the use of these commands to the situation for which they were added to 4D:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Interprocess communication at specific places or your code"),(0,t.kt)("li",{parentName:"ul"},"Handling of interprocess drag and drop"),(0,t.kt)("li",{parentName:"ul"},"In Client/Server, communication between processes on client machines and the stored procedures running on the server machines")),(0,t.kt)("p",null,"For more information, see the chapter ",(0,t.kt)("strong",{parentName:"p"},"Processes")," and the description of these commands."),(0,t.kt)("h3",o({},{id:"vari\xe1veis-interprocesso"}),"Vari\xe1veis interprocesso"),(0,t.kt)("p",null,"Vari\xe1veis interprocessos est\xe3o dispon\xedveis pelo banco de dados e s\xe3o partilhados entre os processos cooperativos. They are primarily used to share information between processes."),(0,t.kt)("blockquote",null,(0,t.kt)("p",{parentName:"blockquote"},"Use of interprocess variables is not recommended since they are not available from preemptive processes and tend to make the code less maintainable.")),(0,t.kt)("p",null,"The name of an interprocess variable always begins with the symbols (",(0,t.kt)("inlineCode",{parentName:"p"},"<>"),") \u2014 a \u201cless than\u201d sign followed by a \u201cgreater than\u201d sign\u2014 followed by 31 characters."),(0,t.kt)("p",null,"In Client/Server, each machine (Client machines and Server machine) share the same definition of interprocess variables, but each machine has a different instance for each variable."))}m.isMDXComponent=!0}}]);