"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[75809],{603905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var s=n(667294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,s,r=function(e,t){if(null==e)return{};var n,s,r={},a=Object.keys(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=s.createContext({}),u=function(e){var t=s.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return s.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},d=s.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=u(n),h=r,f=d["".concat(l,".").concat(h)]||d[h]||p[h]||a;return n?s.createElement(f,i(i({ref:t},c),{},{components:n})):s.createElement(f,i({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var u=2;u<a;u++)i[u]=n[u];return s.createElement.apply(null,i)}return s.createElement.apply(null,n)}d.displayName="MDXCreateElement"},949613:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});n(667294);var s=n(603905);function r(){return r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&(e[s]=n[s])}return e},r.apply(this,arguments)}function a(e,t){if(null==e)return{};var n,s,r=function(e,t){if(null==e)return{};var n,s,r={},a=Object.keys(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}const i={id:"authUsers",title:"Users and sessions"},o=void 0,l={unversionedId:"REST/authUsers",id:"REST/authUsers",title:"Users and sessions",description:"Sessions",source:"@site/docs/REST/authUsers.md",sourceDirName:"REST",slug:"/REST/authUsers",permalink:"/docs/next/REST/authUsers",draft:!1,editUrl:"https://github.com/4d/docs/issues/new?title=Comment%20on%20REST%2FauthUsers.md%20(current)&body=Please%20enter%20your%20comment%3A",tags:[],version:"current",frontMatter:{id:"authUsers",title:"Users and sessions"},sidebar:"docs",previous:{title:"Server Configuration",permalink:"/docs/next/REST/configuration"},next:{title:"Getting Server Information",permalink:"/docs/next/REST/genInfo"}},u={},c=[{value:"Sessions",id:"sessions",level:2},{value:"Force login mode",id:"force-login-mode",level:2},{value:"Descriptive REST requests",id:"descriptive-rest-requests",level:3},{value:"<code>Function authentify</code>",id:"function-authentify",level:2},{value:"Syntax",id:"syntax",level:3},{value:"Example",id:"example",level:3}],p={toc:c};function d(e){var{components:t}=e,i=a(e,["components"]);return(0,s.kt)("wrapper",r({},p,i,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",r({},{id:"sessions"}),"Sessions"),(0,s.kt)("p",null,"When ",(0,s.kt)("a",r({parentName:"p"},{href:"/docs/next/WebServer/sessions#enabling-sessions"}),"scalable sessions are enabled")," (recommended), REST requests can create and use ",(0,s.kt)("a",r({parentName:"p"},{href:"/docs/next/WebServer/sessions"}),"web user sessions"),", providing extra features such as multiple requests handling, data sharing between web client processes, and control of user privileges."),(0,s.kt)("p",null,"When a web user session is opened, you can handle it through the ",(0,s.kt)("inlineCode",{parentName:"p"},"Session")," object and the ",(0,s.kt)("a",r({parentName:"p"},{href:"/docs/next/API/SessionClass"}),"Session API"),". Subsequent REST requests reuse the same session cookie."),(0,s.kt)("p",null,"A session is opened after the user was successfully logged (see below)."),(0,s.kt)("blockquote",null,(0,s.kt)("ul",{parentName:"blockquote"},(0,s.kt)("li",{parentName:"ul"},"On 4D Server, opening a REST session requires that a free 4D client license is available.",(0,s.kt)("br",null)),(0,s.kt)("li",{parentName:"ul"},"On 4D single-user, you can open up to three REST sessions for testing purposes."))),(0,s.kt)("h2",r({},{id:"force-login-mode"}),"Force login mode"),(0,s.kt)("admonition",r({},{title:"Compatibility",type:"note"}),(0,s.kt)("p",{parentName:"admonition"},"The legacy login mode based upon the ",(0,s.kt)("inlineCode",{parentName:"p"},"On REST Authentication")," database method is ",(0,s.kt)("strong",{parentName:"p"},"deprecated")," as of 4D 20 R6. It is now recommended to ",(0,s.kt)("a",r({parentName:"p"},{href:"/docs/next/ORDA/privileges#rolesjson-file"}),"use the ",(0,s.kt)("strong",{parentName:"a"},"force login mode"))," (automatically enabled in new projects) and to implement the ",(0,s.kt)("inlineCode",{parentName:"p"},"ds.authentify()")," function (",(0,s.kt)("a",r({parentName:"p"},{href:"#dsauthentify"}),"see below"),". In converted projects, ",(0,s.kt)("a",r({parentName:"p"},{href:"/docs/next/settings/web#activate-rest-authentication-through-dsauthentify-function"}),"a button in the Settings dialog box")," will help you upgrade your configuration. In Qodly Studio for 4D, the mode can be set using the ",(0,s.kt)("a",r({parentName:"p"},{href:"/docs/next/WebServer/qodly-studio#force-login"}),(0,s.kt)("strong",{parentName:"a"},"Force login")," option")," in the Privileges panel.")),(0,s.kt)("p",null,"The user login sequence is the following:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},'At the first REST call (for a webform call for example), a "guest" web user session is created. It has no privileges, no rights to execute requests other than ',(0,s.kt)("a",r({parentName:"li"},{href:"#descriptive-rest-requests"}),"descriptive REST requests"),", no license consumption.",(0,s.kt)("br",{parentName:"li"}),'Descriptive REST requests are always processed by the server, even if no web user session using a license is opened. In this case, they are processed through "guest" sessions.')),(0,s.kt)("ol",r({},{start:2}),(0,s.kt)("li",{parentName:"ol"},"You call your ",(0,s.kt)("a",r({parentName:"li"},{href:"#authentify"}),(0,s.kt)("inlineCode",{parentName:"a"},"authentify()")," function")," (created beforehand), in which you check the user credentials and call ",(0,s.kt)("a",r({parentName:"li"},{href:"/docs/next/API/SessionClass#setprivileges"}),(0,s.kt)("inlineCode",{parentName:"a"},"Session.setPrivileges()"))," with appropriate privileges. ",(0,s.kt)("inlineCode",{parentName:"li"},"authentify()")," must be an exposed ",(0,s.kt)("a",r({parentName:"li"},{href:"/docs/next/ORDA/ordaClasses#datastore-class"}),"datastore class function"),".")),(0,s.kt)("ol",r({},{start:3}),(0,s.kt)("li",{parentName:"ol"},"The ",(0,s.kt)("inlineCode",{parentName:"li"},"/rest/$catalog/authentify")," request is sent to the server along with user credentials. This step only requires a basic login form that do not access data; it can be a ",(0,s.kt)("a",r({parentName:"li"},{href:"/docs/next/WebServer/qodly-studio"}),"Qodly form")," (called via the ",(0,s.kt)("inlineCode",{parentName:"li"},"/rest/$getWebForm")," request).")),(0,s.kt)("ol",r({},{start:4}),(0,s.kt)("li",{parentName:"ol"},"If the user is successfully authentified, a 4D license is consumed on the server and all REST requests are accepted.")),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"alt-text",src:n(34893).Z,width:"1344",height:"756"})),(0,s.kt)("p",null,"In the user login phase, license usage is disconnected from web user sessions. A license is required only when the ",(0,s.kt)("a",r({parentName:"p"},{href:"/docs/next/API/SessionClass#setprivileges"}),(0,s.kt)("inlineCode",{parentName:"a"},"Session.setPrivileges()"))," is executed, allowing you to control the number of used licenses.    "),(0,s.kt)("p",null,"All other REST requests (handling data or executing a function) will only be processed if they are executed within a web session with appropriate privileges, otherwise they return an error. To assign privileges to a web session, you need to execute the ",(0,s.kt)("a",r({parentName:"p"},{href:"/docs/next/API/SessionClass#setprivileges"}),(0,s.kt)("inlineCode",{parentName:"a"},"Session.setPrivileges()"))," function for the session. Executing this function triggers the 4D license consumption.  "),(0,s.kt)("h3",r({},{id:"descriptive-rest-requests"}),"Descriptive REST requests"),(0,s.kt)("p",null,'Descriptive REST requests can be processed in web user sessions that do not require licenses ("guest" sessions). These requests are:'),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",r({parentName:"li"},{href:"/docs/next/REST/catalog"}),(0,s.kt)("inlineCode",{parentName:"a"},"/rest/$catalog"))," requests (e.g. ",(0,s.kt)("inlineCode",{parentName:"li"},"/rest/$catalog/$all"),") - access to available dataclasses"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"/rest/$catalog/authentify")," - the datastore function used to login the user"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"/rest/$getWebForm")," - the rendering of a Qodly form")),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"alt-text",src:n(581526).Z,width:"1171",height:"302"})),(0,s.kt)("h2",r({},{id:"function-authentify"}),(0,s.kt)("inlineCode",{parentName:"h2"},"Function authentify")),(0,s.kt)("h3",r({},{id:"syntax"}),"Syntax"),(0,s.kt)("pre",null,(0,s.kt)("code",r({parentName:"pre"},{className:"language-4d"}),"exposed Function authentify({params : type}) {-> result : type}\n    // code\n")),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"authentify()")," function must be implemented in the ",(0,s.kt)("a",r({parentName:"p"},{href:"/docs/next/ORDA/ordaClasses#datastore-class"}),"DataStore class")," of the project and must be called through a REST request."),(0,s.kt)("p",null,'This function is the only available entry point from REST guest sessions when the "force login" mode is enabled: any other function call or data access is rejected until the session acquires appropriate privileges.'),(0,s.kt)("admonition",r({},{type:"note"}),(0,s.kt)("p",{parentName:"admonition"},"The ",(0,s.kt)("inlineCode",{parentName:"p"},"authentify()")," function can always be executed by a REST guest session, whatever the ",(0,s.kt)("a",r({parentName:"p"},{href:"/docs/next/ORDA/privileges#rolesjson-file"}),(0,s.kt)("inlineCode",{parentName:"a"},"roles.json")," file")," configuration.")),(0,s.kt)("p",null,"The function can receive any authentication or contextual information as ",(0,s.kt)("a",r({parentName:"p"},{href:"/docs/next/REST/classFunctions#parameters"}),"parameter(s)")," and can return any value. Since this function can only be called from a REST request, parameters must be passed through the body of the POST request."),(0,s.kt)("p",null,"This function should contain two parts:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"some code to identify and authenticate the REST request sender,"),(0,s.kt)("li",{parentName:"ul"},"if the authentication is successful, a call to ",(0,s.kt)("a",r({parentName:"li"},{href:"/docs/next/API/SessionClass#setprivileges"}),(0,s.kt)("inlineCode",{parentName:"a"},"Session.setPrivileges()"))," that assigns appropriate privileges to the session.")),(0,s.kt)("p",null,"If the function does not call ",(0,s.kt)("a",r({parentName:"p"},{href:"/docs/next/API/SessionClass#setprivileges"}),(0,s.kt)("inlineCode",{parentName:"a"},"Session.setPrivileges()")),", no privileges are assigned, no license is consumed and subsequent non-descriptive REST requests are rejected."),(0,s.kt)("h3",r({},{id:"example"}),"Example"),(0,s.kt)("p",null,"You only want to know users to open a web session on the server. You created the following ",(0,s.kt)("inlineCode",{parentName:"p"},"authentify()")," function in the datastore class:"),(0,s.kt)("pre",null,(0,s.kt)("code",r({parentName:"pre"},{className:"language-4d"}),'exposed Function authentify($credentials : Object) : Text\n\nvar $users : cs.UsersSelection\nvar $user : cs.UsersEntity\n\n$users:=ds.Users.query("name = :1"; $credentials.name)\n$user:=$users.first()\n\nIf ($user#Null) //the user is known\n    If (Verify password hash($credentials.password; $user.password))\n        Session.setPrivileges("vip")\n    Else\n\n        return "Wrong password"\n    End if\nElse\n        return "Wrong user"\nEnd if\n')),(0,s.kt)("p",null,"To call the ",(0,s.kt)("inlineCode",{parentName:"p"},"authentify()")," function:"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"POST")," ",(0,s.kt)("inlineCode",{parentName:"p"},"127.0.0.1:8111/rest/$catalog/authentify")),(0,s.kt)("p",null,"Body of the request:"),(0,s.kt)("pre",null,(0,s.kt)("code",r({parentName:"pre"},{className:"language-json"}),'[{"name":"Henry",\n"password":"123"}]\n')))}d.isMDXComponent=!0},581526:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/force-login-1-f9e377d9d1294c166d2e316a30d4eef4.jpeg"},34893:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/force-login-2-c615d4581880aa201c1e7abd591f6146.jpeg"}}]);